{"version":3,"file":"static/js/157.e460bcdf.chunk.js","mappings":"6TAeA,MA6EA,EA7EsBA,KAClB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAA8B,CAAEC,MAAO,CAAEC,WAAW,EAAOC,cAAc,MAClGC,EAASC,IAAcL,EAAAA,EAAAA,WAAS,GAEjCM,EAAmBC,IACd,EAGLC,GAAWC,EAAAA,EAAAA,UAAQ,KACrB,MAAMC,EAAc,CAAEZ,WAAUC,cAAaH,WAAUU,mBACvD,MAAO,CACH,CACIK,GAAI,eACJC,MAAO,gBACPC,YAAa,wEACbC,WAAWC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAUN,EAAaO,cAAe,CAAC,EAAGC,aAAc,eAAgBZ,qBAEpG,CACIK,GAAI,YACJC,MAAO,qBACPC,YAAa,2CACbC,WACIC,EAAAA,EAAAA,KAACI,EAAAA,EAAS,IAECT,EACHO,cAAe,CAAEG,UAAW,KAAMC,SAAU,MAC5CH,aAAc,YACdZ,qBAKhB,CACIK,GAAI,SACJC,MAAO,SACPC,YAAa,8BACbC,WAAWC,EAAAA,EAAAA,KAACO,EAAAA,EAAU,IAAUZ,EAAaO,cAAe,CAAC,EAAGC,aAAc,SAAUZ,qBAE5F,CACIK,GAAI,gBACJC,MAAO,uBACPC,YAAa,gDACbC,WAAWC,EAAAA,EAAAA,KAACQ,EAAAA,EAAqB,IAAUb,EAAaO,cAAe,CAAC,EAAGC,aAAc,mBAEhG,GACF,IAwBH,OAAOM,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACFtB,IAAWW,EAAAA,EAAAA,KAACY,EAAAA,EAAM,KACnBZ,EAAAA,EAAAA,KAACa,EAAAA,GAAI,CAAAF,UAAEG,EAAAA,EAAAA,IAAe,CAAErB,SAAUA,EAAUV,SAAUA,EAAUgC,cAnB5CC,UACpB1B,GAAW,GACX,KACQ2B,EAAAA,EAAAA,GAAaC,IAAAA,IAAMnC,EAAU,gBARfiC,WACtB,MAAMG,GAAcC,EAAAA,EAAAA,IAAqB,IAAKrC,EAAUsC,QAAS,CAAEC,UAAW,YAC9E,OAAOC,EAAAA,EAAAA,IAASJ,EAAY,EAOdK,GACN7C,EAAS,sBACTE,GAAS4C,EAAAA,EAAAA,IAAQ,CAAEC,QAAS,sCAE5B7C,GAASK,EAAAA,EAAAA,IAAM,CAAEwC,QAAS,oCAElC,CAAE,MAAOC,GACL9C,GAASK,EAAAA,EAAAA,IAAM,CAAEwC,QAAS,gCAC9B,CAAC,QACGpC,GAAW,EACf,GAKgGsC,YAAa,oBAC9G,C","sources":["pages/alertManager/views/AddRule.tsx"],"sourcesContent":["import { Grid } from '@mui/material';\nimport _ from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { addAlert } from 'services/alerts';\nimport AlertInfo from '../components/RuleInfo';\nimport QueryBuilder from '../components/QueryBuilder';\nimport RuleLabels from '../components/RuleLabels';\nimport NotificationComponent from '../components/NotificationComponent';\nimport { useDispatch } from 'react-redux';\nimport { error, success } from 'services/toaster';\nimport { validateForm } from '../services/queryBuilder';\nimport { transformRulePayload, renderSections } from '../services/utils';\nimport Loader from 'components/Loader';\n\nconst AddAlertrules = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const [formData, setFormData] = useState<Record<string, any>>({ error: { alertInfo: false, queryBuilder: false } });\n    const [loading, setLoading] = useState(false);\n\n    const isFieldEditable = (value: string) => {\n        return true;\n    };\n\n    const sections = useMemo(() => {\n        const commonProps = { formData, setFormData, dispatch, isFieldEditable };\n        return [\n            {\n                id: 'queryBuilder',\n                title: 'Query Builder',\n                description: 'List down the requirements of your query and set the alert conditions',\n                component: <QueryBuilder {...{ ...commonProps, existingState: {}, sectionLabel: 'queryBuilder', isFieldEditable }} />\n            },\n            {\n                id: 'alertInfo',\n                title: 'Rule Configuration',\n                description: 'Set the basic information for your alert',\n                component: (\n                    <AlertInfo\n                        {...{\n                            ...commonProps,\n                            existingState: { frequency: '1m', interval: '1m' },\n                            sectionLabel: 'alertInfo',\n                            isFieldEditable\n                        }}\n                    />\n                )\n            },\n            {\n                id: 'labels',\n                title: 'Labels',\n                description: 'Attach labels to your alert',\n                component: <RuleLabels {...{ ...commonProps, existingState: {}, sectionLabel: 'labels', isFieldEditable }} />\n            },\n            {\n                id: 'notifications',\n                title: 'Notification Channel',\n                description: 'Configure notification channel for your alert',\n                component: <NotificationComponent {...{ ...commonProps, existingState: {}, sectionLabel: 'notifications' }} />\n            }\n        ];\n    }, []);\n\n    const addAlertRule: any = async () => {\n        const rulePayload = transformRulePayload({ ...formData, context: { alertType: 'CUSTOM' } });\n        return addAlert(rulePayload);\n    };\n\n    const createAlertRule = async () => {\n        setLoading(true);\n        try {\n            if (validateForm(_.get(formData, 'error'))) {\n                await addAlertRule();\n                navigate('/alertRules/custom');\n                dispatch(success({ message: 'Alert Rule created successfully' }));\n            } else {\n                dispatch(error({ message: 'Please fill all required fields' }));\n            }\n        } catch (err) {\n            dispatch(error({ message: \"Failed to create alert rule\" }));\n        } finally {\n            setLoading(false)\n        }\n    };\n\n    return <>\n        {loading && <Loader />}\n        <Grid>{renderSections({ sections: sections, formData: formData, actionHandler: createAlertRule, actionLabel: \"Create Rule\" })}</Grid>\n    </>\n};\n\nexport default AddAlertrules;\n"],"names":["AddAlertrules","navigate","useNavigate","dispatch","useDispatch","formData","setFormData","useState","error","alertInfo","queryBuilder","loading","setLoading","isFieldEditable","value","sections","useMemo","commonProps","id","title","description","component","_jsx","QueryBuilder","existingState","sectionLabel","AlertInfo","frequency","interval","RuleLabels","NotificationComponent","_jsxs","_Fragment","children","Loader","Grid","renderSections","actionHandler","async","validateForm","_","rulePayload","transformRulePayload","context","alertType","addAlert","addAlertRule","success","message","err","actionLabel"],"sourceRoot":""}