{"version":3,"file":"static/js/174.2dcd1085.chunk.js","mappings":"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","sources":["data/telemetry/pageIds.ts","hooks/useImpression.ts","../node_modules/@mui/icons-material/esm/MonitorHeart.js","pages/metrics/health.tsx","pages/metrics/details.tsx","services/grafana.ts"],"sourcesContent":["export default {\n  home: {\n    home: 'home'\n  },\n  login: 'login',\n  metrics: {\n    infra: 'metrics:infra',\n    overallInfra: 'metrics:infra',\n    api: 'metrics:api',\n    ingestion: 'metrics:ingestion',\n    processing: 'metrics:processing',\n    storage: 'metrics:storage'\n  },\n  dataset: {\n    list: \"dataset:list\",\n    create: 'dataset:create',\n    edit: 'dataset:edit',\n    pages: {\n      schema: \"json-schema\",\n      input: \"input\",\n      field: \"fields\",\n      processing: \"processing\",\n      advanced: \"advanced\",\n      review: \"review\"\n    }\n  },\n  masterdataset: {\n    create: 'masterDataset:create',\n    edit: 'masterDataset:edit',\n    pages: {\n      schema: \"json-schema\",\n      input: \"input\",\n      field: \"fields\",\n      review: \"review\"\n    }\n  },\n  systemSettings: {\n    list: \"systemSettings:list\"\n  }\n};\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { generateImpressionEvent } from 'services/telemetry';\n\nconst useImpression = ({ type = \"\", subtype = \"PAGINATE\", pageid, object = {} }: Record<string, any>) => {\n    const location = useLocation();\n    const { pathname } = location;\n    const edata = { type, subtype, pageid: pageid || pathname, uri: pathname };\n\n    useEffect(() => {\n        generateImpressionEvent({ edata, object });\n    }, [pageid])\n\n};\n\nexport default useImpression;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon([/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.11 12.45 14 10.24l-3.11 6.21c-.16.34-.51.55-.89.55s-.73-.21-.89-.55L7.38 13H2v5c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2v-5h-6c-.38 0-.73-.21-.89-.55\"\n}, \"0\"), /*#__PURE__*/_jsx(\"path\", {\n  d: \"M20 4H4c-1.1 0-2 .9-2 2v5h6c.38 0 .73.21.89.55L10 13.76l3.11-6.21c.34-.68 1.45-.68 1.79 0L16.62 11H22V6c0-1.1-.9-2-2-2\"\n}, \"1\")], 'MonitorHeart');","import _ from 'lodash';\nimport { Favorite, HeartBroken, MonitorHeart } from '@mui/icons-material';\nimport { Chip } from \"@mui/material\"\nimport { useEffect, useState } from \"react\";\nimport globalConfig from 'data/initialConfig';\nimport { fetchChartData, fetchMultipleMetrics } from \"services/clusterMetrics\";\n\nconst Health = (props: any) => {\n    const defaults = { color: \"success\", label: \"Loading Health...\" }\n    const { metadata } = props;\n    const { query, transformer } = metadata;\n    const [state, setState] = useState<any>(defaults);\n\n    const updateLabel = (transformedLabel: string) => {\n        if (Array.isArray(transformedLabel)) {\n            const [label, color] = transformedLabel;\n            setState({ color, label })\n        } else {\n            setState({ color: \"success\", label: transformedLabel });\n        }\n    }\n\n    const fetchMetric = async () => {\n        try {\n            const response = await (Array.isArray(query) ? fetchMultipleMetrics(query as any) : fetchChartData(query));\n            const transformedLabel = (transformer && transformer(response)) || response;\n            updateLabel(transformedLabel);\n\n        } catch (error) { }\n    }\n\n    const configureMetricFetcher = () => {\n        const frequency = globalConfig.clusterMenu.frequency;\n        fetchMetric();\n        return setInterval(() => fetchMetric(), frequency * 1000)\n    }\n\n    const getIcon = () => {\n        const label = _.toLower(_.get(state, 'label'));\n        if (!['healthy', 'unhealthy'].includes(label)) return < MonitorHeart />;\n        return label === \"healthy\" ? <Favorite /> : <HeartBroken />\n    }\n\n    useEffect(() => {\n        setState(defaults);\n        const interval = configureMetricFetcher();\n        return () => interval && clearInterval(interval)\n    }, [query, transformer]);\n\n    return <div onClick={_ => fetchMetric()}>\n        <Chip icon={getIcon()} color={_.get(state, 'color')} label={_.get(state, 'label')} />\n    </div>\n}\n\nexport default Health","import * as _ from 'lodash';\nimport { Grid, Tooltip, Typography, Stack } from '@mui/material';\nimport IconButton from 'components/@extended/IconButton';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport MainCard from 'components/MainCard';\nimport { metricsMetadata } from 'data/metrics';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { error } from 'services/toaster';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport { Avatar } from '@mui/material';\nimport { navigateToGrafana } from 'services/grafana';\nimport { useTheme } from '@mui/material';\nimport grafanaIcon from 'assets/images/icons/grafana_icon.svg';\nimport pageIds from 'data/telemetry/pageIds';\nimport useImpression from 'hooks/useImpression';\nimport intereactIds from 'data/telemetry/interact.json'\nimport { v4 } from 'uuid';\nimport Health from './health';\n\nconst MetricsDetails = (props: any) => {\n    const { id } = props;\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const params = useParams();\n    const [metadata, setmetadata] = useState<Record<string, any>>();\n    const iconBackColor = theme.palette.mode === 'dark' ? 'background.default' : 'grey.100';\n    const metricId = id || _.get(params, 'metricId');\n    useImpression({ type: \"detail\", pageid: _.get(pageIds, ['metrics', metricId]) });\n\n    const navigateToHome = ({ errMsg }: any) => {\n        navigate('/');\n        errMsg && dispatch(error({ message: errMsg }));\n    }\n\n    const fetchMetadata = () => {\n        if (!metricId) navigateToHome({ errMsg: 'Metric Id Missing' });\n        const metricsMeta = _.find(metricsMetadata, ['id', metricId]);\n        if (!metricsMeta) navigateToHome({ errMsg: 'Invalid Metric' })\n        setmetadata(metricsMeta);\n    }\n\n    useEffect(() => {\n        fetchMetadata();\n    }, [metricId]);\n\n    const renderCharts = (metadata: any) => {\n        if (metadata) {\n            const { charts } = metadata as { charts: Record<string, any> };\n            return _.flatten(_.map(charts, (value, index) => {\n                const { size, metadata = [], groups = [], } = value;\n                const { xs, sm, lg, md } = size;\n                const groupsData = _.map(groups, (group) => {\n                    const { metadata: groupMetadata, title } = group;\n                    return (\n                        <>\n                            <Grid item xs={12}>\n                                <Typography variant=\"h5\">{title}</Typography>\n                            </Grid>\n                            {\n                                _.map(groupMetadata, (meta, metaIndex) => {\n                                    const { id = v4(), chart, description, noItem = false, size = {} } = meta;\n                                    const { xs: overiddenXs, sm: overiddenSm, lg: overiddenLg, md: overiddenMd } = size;\n                                    if (noItem) return React.cloneElement(chart, { description, metricId, key: `${metaIndex}-${Math.random()}` });\n                                    return <Grid item xs={overiddenXs || xs} sm={overiddenSm || sm} md={overiddenMd || md} lg={overiddenLg || lg} key={`${metaIndex}-${Math.random()}`} alignItems=\"stretch\">\n                                        {React.cloneElement(chart, { description, metricId, uuid: id })}\n                                    </Grid>\n                                })\n                            }\n                            <Grid item xs={12}></Grid>\n                        </>\n                    );\n                });\n                const chartData = _.map(metadata, (meta, metaIndex) => {\n                    const { id = v4(), chart, description, noItem = false } = meta;\n                    if (noItem) return React.cloneElement(chart, { description, metricId, key: `${metaIndex}-${Math.random()}` });\n                    return <Grid item xs={xs} sm={sm} md={md} lg={lg} key={`${metaIndex}-${Math.random()}`} alignItems=\"stretch\">\n                        {React.cloneElement(chart, { description, metricId, uuid: id })}\n                    </Grid>\n                });\n                if (_.size(groups) > 0) return groupsData;\n                else return chartData;\n            }));\n        }\n    }\n\n    const renderGrafanaIcon = () => {\n        const link = _.get(metadata, 'links.grafana.link')\n        if (!link) return null;\n        return (\n            <Tooltip title=\"Navigate to Grafana Dashboard\" onClick={_ => navigateToGrafana(link)}>\n                <IconButton\n                    data-edataid={`${intereactIds.grafana_navigate}:${metricId}`}\n                    color=\"secondary\" variant=\"light\" sx={{ color: 'text.primary', bgcolor: 'transparent', ml: 0.75 }}>\n                    <Avatar alt=\"Gradana\" src={grafanaIcon} />\n                </IconButton>\n            </Tooltip>\n        );\n    }\n\n    const renderTitle = () => {\n        const health = _.get(metadata, 'health');\n        return (\n            <>\n                <Stack direction=\"row\"\n                    justifyContent=\"flex-start\"\n                    alignItems=\"center\"\n                    spacing={2}>\n                    <div>\n                        {`${metadata?.primaryLabel || \"\"} Metrics `}\n                    </div>\n                    {health && <Health metadata={health} />}\n                    <Tooltip title={metadata?.description}>\n                        <InfoCircleOutlined />\n                    </Tooltip>\n\n                </Stack>\n\n            </>\n        )\n    }\n\n    return (\n        <>\n            <MainCard title={renderTitle()} secondary={renderGrafanaIcon()}>\n                <Grid container spacing={2} marginBottom={1} alignItems=\"stretch\">\n                    {renderCharts(metadata)}\n                </Grid>\n            </MainCard >\n        </>\n    )\n};\n\nexport default MetricsDetails;\n","import { getConfigValue } from \"./configData\";\n\nexport const navigateToGrafana = (dashboardLink: string) => {\n    const graphanaUrl = getConfigValue(\"GRAFANA_URL\")\n    if (graphanaUrl) {\n        const url = `${graphanaUrl}/${dashboardLink}`\n        window.open(url);\n    }\n} \n"],"names":["home","login","metrics","infra","overallInfra","api","ingestion","processing","storage","dataset","list","create","edit","pages","schema","input","field","advanced","review","masterdataset","systemSettings","_ref","type","subtype","pageid","object","location","useLocation","pathname","edata","uri","useEffect","generateImpressionEvent","createSvgIcon","_jsx","d","props","defaults","color","label","metadata","query","transformer","state","setState","useState","fetchMetric","async","response","Array","isArray","fetchMultipleMetrics","fetchChartData","transformedLabel","updateLabel","error","interval","configureMetricFetcher","frequency","globalConfig","clusterMenu","setInterval","clearInterval","onClick","_","children","Chip","icon","getIcon","includes","Favorite","HeartBroken","MonitorHeart","id","theme","useTheme","dispatch","useDispatch","navigate","useNavigate","params","useParams","setmetadata","metricId","palette","mode","useImpression","pageIds","navigateToHome","errMsg","message","fetchMetadata","metricsMeta","metricsMetadata","_Fragment","MainCard","title","renderTitle","health","_jsxs","Stack","direction","justifyContent","alignItems","spacing","primaryLabel","Health","Tooltip","description","InfoCircleOutlined","secondary","renderGrafanaIcon","link","dashboardLink","graphanaUrl","getConfigValue","url","window","open","navigateToGrafana","IconButton","intereactIds","variant","sx","bgcolor","ml","Avatar","alt","src","grafanaIcon","Grid","container","marginBottom","charts","value","index","size","groups","xs","sm","lg","md","groupsData","group","groupMetadata","item","Typography","meta","metaIndex","v4","chart","noItem","overiddenXs","overiddenSm","overiddenLg","overiddenMd","React","key","Math","random","uuid","chartData","renderCharts"],"sourceRoot":""}