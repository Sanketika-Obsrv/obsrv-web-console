{"version":3,"file":"static/js/377.59e4bcd4.chunk.js","mappings":"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","sources":["components/TableWithCustomHeader.tsx","pages/alertManager/components/NotificationComponent.tsx","../node_modules/@mui/icons-material/esm/PlayArrowOutlined.js","pages/alertManager/components/QueryBuilder.tsx","pages/alertManager/components/RuleInfo.tsx","pages/alertManager/components/LabelsList.tsx","pages/alertManager/components/RuleLabels.tsx","pages/alertManager/components/RunQuery.tsx","../node_modules/@ant-design/icons-svg/es/asn/DeleteOutlined.js","../node_modules/@ant-design/icons/es/icons/DeleteOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { Stack, Table, TableBody, TableCell, TableHead, TableRow } from '@mui/material';\nimport { useTable, useFilters, useGlobalFilter, useExpanded } from 'react-table';\nimport { DefaultColumnFilter, renderFilterTypes } from 'utils/react-table';\nimport * as _ from 'lodash';\n\nfunction TableWithCustomHeader({ columns, data, renderHeader }: any) {\n    const [tableData, setTableData] = useState<any>(data || []);\n    const filterTypes = useMemo(() => renderFilterTypes, []);\n    const defaultColumn = useMemo(() => ({ Filter: DefaultColumnFilter }), []);\n    const initialState = useMemo(() => ({ filters: [], hiddenColumns: ['tags'] }), []);\n\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, state,\n        // @ts-ignore\n        preGlobalFilteredRows,\n        // @ts-ignore\n        setGlobalFilter,\n        // @ts-ignore\n        toggleRowExpanded\n    } = useTable(\n        {\n            columns,\n            data: tableData,\n            // @ts-ignore\n            defaultColumn,\n            // @ts-ignore\n            initialState,\n            filterTypes,\n            autoResetExpanded: false\n        },\n        useGlobalFilter,\n        useFilters,\n        useExpanded\n    );\n\n    useEffect(() => {\n        setTableData(data);\n    }, [data]);\n\n    return (\n        <Stack spacing={2}>\n            {renderHeader ? renderHeader({ preGlobalFilteredRows, setGlobalFilter, toggleRowExpanded, state }) : null}\n            <Table {...getTableProps()}>\n                <TableHead sx={{ borderTopWidth: 2 }}>\n                    {headerGroups.map((headerGroup) => (\n                        <TableRow {...headerGroup.getHeaderGroupProps()}>\n                            {headerGroup.headers.map((column: any) => {\n                                const { style = {} } = column;\n                                return <TableCell style={style} {...column.getHeaderProps([{ className: column.className }])}>\n                                    {column.render('Header')}\n                                </TableCell>\n                            })}\n                        </TableRow>\n                    ))}\n                </TableHead>\n                <TableBody {...getTableBodyProps()}>\n                    {headerGroups.map((group: any) => (\n                        <TableRow {...group.getHeaderGroupProps()}>\n                            {group.headers.map((column: any) => (\n                                <TableCell {...column.getHeaderProps([{ className: column.className }])}>\n                                    {column.canFilter ? column.render('Filter') : null}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    ))}\n                    {rows.map((row: any) => {\n                        prepareRow(row);\n                        return (\n                            <TableRow {...row.getRowProps()}>\n                                {row.cells.map((cell: any) => (\n                                    <TableCell {...cell.getCellProps([{ className: cell.column.className }])}>\n                                        {cell.render('Cell')}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </Stack>\n    );\n}\n\nexport default TableWithCustomHeader;\n","import { Box, Button, Grid, Stack, Typography } from \"@mui/material\";\nimport MUIForm from \"components/form\";\nimport { StandardWidthButton } from \"components/styled/Buttons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { fetchChannels } from \"services/notificationChannels\";\nimport interactIds from \"data/telemetry/interact.json\";\nimport { useNavigate } from \"react-router\";\nimport _ from 'lodash';\n\nconst NotificationComponent = (props: any) => {\n    const { formData, setFormData, existingState, sectionLabel } = props;\n    const existingNotifications = _.get(existingState, 'notification') || {};\n    const channelId = _.get(existingNotifications, 'channels[0]');\n    const [value, subscribe] = useState<any>(channelId ? { notificationChannel: channelId } : {});\n    const onSubmission = (value: any) => { };\n    const [notificationFieldOptions, setNotificationFieldOptions] = useState<Record<string, any>[]>([]);\n    const formikRef = useRef(null);\n    const navigate = useNavigate();\n\n    const getChannels = () => {\n        return fetchChannels({ data: { \"request\": { \"filters\": { \"status\": \"live\" } } } })\n            .then(response => _.get(response, 'result.notifications') || [])\n            .catch(err => ([]))\n    }\n\n    const transformChannels = (channels: Record<string, any>[]) => {\n        return _.map(channels, channel => {\n            const { id, name, type } = channel;\n            return {\n                label: `${name} (${type})`,\n                value: id\n            }\n        })\n    }\n\n    const fetchNotifications = async () => {\n        const channels = await getChannels();\n        let transformedChannels = transformChannels(channels);\n        setNotificationFieldOptions(transformedChannels);\n    }\n\n    const fields = [\n        {\n            name: \"notificationChannel\",\n            label: \"Notification Channels\",\n            type: \"autocomplete\",\n            required: true,\n            selectOptions: _.concat([{ label: 'none', value: null }], notificationFieldOptions),\n            tooltip: \"Select the channel for notification delivery\"\n        },\n    ];\n\n    const subscribeToFormChanges = async () => {\n        setFormData((preState: Record<string, any>) => {\n            const { notificationChannel } = value;\n            const existingNotifications = _.get(preState, 'notifications') || {};\n            return {\n                ...preState,\n                ...{\n                    notification: {\n                        ...existingNotifications,\n                        channels: [notificationChannel]\n                    }\n                }\n            }\n        })\n    }\n\n    useEffect(() => {\n        subscribeToFormChanges();\n    }, [value]);\n\n    useEffect(() => {\n        fetchNotifications();\n    }, []);\n\n    const renderSelectChannelsTemplate = () => {\n        return <Grid container direction='row' alignItems={\"center\"} spacing={2}>\n            <Grid item xs={6}>\n                <MUIForm\n                    initialValues={value}\n                    enableReinitialize={true}\n                    subscribe={subscribe}\n                    onSubmit={(value: any) => onSubmission(value)}\n                    fields={fields}\n                    ref={formikRef}\n                />\n            </Grid>\n            <Grid item xs={6}>\n                <Button variant=\"contained\" onClick={() => navigate(\"/alertChannels\")}>Add Notification Channel</Button>\n            </Grid>\n        </Grid>\n    }\n\n    const renderCreateNewChannelTemplate = () => {\n        return <Grid item xs={12}>\n            <Stack spacing={4} direction=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                <Typography variant=\"body1\" fontWeight={500}>\n                    There are no live notification channels yet. Please create/publish one to proceed further\n                </Typography>\n                <Box>\n                    <StandardWidthButton\n                        data-edataid={interactIds.add_notification_channel}\n                        onClick={() => navigate('/alertChannels')}\n                        variant=\"contained\"\n                        size=\"large\"\n                        sx={{ width: 'auto' }}\n                    >\n                        <Typography variant=\"h5\">\n                            Create Notification Channel\n                        </Typography>\n                    </StandardWidthButton>\n                </Box>\n            </Stack>\n        </Grid>\n    }\n\n    const renderSection = () => {\n        const channelsExists = _.get(notificationFieldOptions, 'length') > 0;\n        if (!channelsExists) return renderCreateNewChannelTemplate();\n        return renderSelectChannelsTemplate();\n    }\n\n    return <Grid container direction='column'>{renderSection()}</Grid>\n}\n\nexport default NotificationComponent;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 8.64 15.27 12 10 15.36zM8 5v14l11-7z\"\n}), 'PlayArrowOutlined');","import _ from 'lodash';\nimport { Button, Grid } from '@mui/material';\nimport MUIForm from 'components/form';\nimport { useEffect, useRef, useState } from 'react';\nimport * as yup from 'yup';\nimport { getMetricsGroupedByComponents, queryOperators } from '../services/queryBuilder';\nimport { PlayArrowOutlined } from '@mui/icons-material';\nimport RunQuery from './RunQuery';\nimport Loader from 'components/Loader';\nimport en from 'utils/locales/en.json'\nimport { validateFormValues } from 'services/utils';\n\nconst QueryBuilder = (props: any) => {\n    const { setFormData, existingState, sectionLabel, isFieldEditable } = props;\n    const [value, subscribe] = useState<any>(() => {\n        if (!_.isEmpty(existingState)) {\n            const operatorType = _.get(existingState, \"operator\")\n            const thresholdValue = _.get(existingState, \"threshold\")\n            if (_.includes([\"within_range\", \"outside_range\"], operatorType)) {\n                return { ..._.omit(existingState, [\"threshold\"]), threshold_from: _.get(thresholdValue, 0), threshold_to: _.get(thresholdValue, 1) }\n            }\n            return { ..._.omit(existingState, [\"threshold_from\", \"threshold_to\"]), threshold: _.get(thresholdValue, 0) }\n        }\n        return {}\n    });\n    const onSubmission = (value: any) => { };\n    const formikRef = useRef(null);\n    const [selectedCategory, setSelectedCategory] = useState<string | null>(existingState?.category);\n    const [loading, setLoading] = useState(false);\n\n    const [runQuery, setRunQuery] = useState(false);\n    const [validQuery, setValidQuery] = useState(false);\n    const [components, setComponents] = useState<any>({});\n\n    const shouldRenderField = (field: Record<string, any>, dependsOn: string, values: any) => {\n        const currentValue = _.get(value, dependsOn);\n        if (!currentValue) return null;\n        if (!values || _.includes(values, currentValue)) {\n            return field;\n        }\n    };\n\n    const shouldRenderSubComponentField = (field: Record<string, any>, dependsOn: string) => {\n        const currentValue = _.get(value, dependsOn);\n        if (!currentValue) return null;\n        const components = getSubComponentForSelectedComponent();\n        if (_.size(components) == 0) return null;\n        return field;\n    };\n\n    useEffect(() => {\n        const { category } = value || {};\n        if (selectedCategory !== category) {\n            subscribe({ category });\n            setRunQuery(false);\n            setSelectedCategory(category);\n        }\n    }, [value?.category]);\n\n    const getMetricsForSelectedComponent = () => {\n        const selectedComponent = _.get(value, 'category');\n        const selectedSubComponent = _.get(value, 'subComponent') || null;\n        const supportedMetrics = _.get(components, selectedComponent) || [];\n        _.groupBy(supportedMetrics, 'subComponent');\n\n        if (selectedSubComponent) {\n            const filteredMetrics = _.filter(supportedMetrics, (supportedMetric) => supportedMetric.subComponent == selectedSubComponent);\n            return _.map(filteredMetrics, (supportedMetric) => {\n                const { alias, metric } = supportedMetric;\n                return {\n                    label: alias,\n                    value: metric\n                };\n            });\n        }\n        return _.map(supportedMetrics, (supportedMetric) => {\n            const { alias, metric } = supportedMetric;\n            return {\n                label: alias,\n                value: metric\n            };\n        });\n    };\n\n    const getSubComponentForSelectedComponent = () => {\n        const selectedComponent = _.get(value, 'category');\n        const supportedMetrics = _.get(components, selectedComponent) || [];\n        const subComponents = _.groupBy(supportedMetrics, 'subComponent');\n        _.unset(subComponents, 'null');\n        return _.map(_.keys(subComponents), (subComponent) => {\n            return {\n                label: subComponent,\n                value: subComponent\n            };\n        });\n    };\n\n    const fields = _.flatten(_.compact([\n        {\n            name: 'category',\n            label: 'Component',\n            type: 'select',\n            required: true,\n            disabled: !isFieldEditable('category'),\n            selectOptions: _.map(_.keys(components), (component) => ({ label: _.capitalize(component), value: component })),\n            tooltip: 'Select the rule category'\n        },\n        shouldRenderSubComponentField(\n            {\n                name: 'subComponent',\n                label: 'Subcomponent',\n                type: 'select',\n                required: true,\n                disabled: !isFieldEditable('subComponent'),\n                selectOptions: getSubComponentForSelectedComponent(),\n                tooltip: 'Select the rule subcategory'\n            },\n            'category'\n        ),\n        shouldRenderField(\n            {\n                name: 'metric',\n                label: 'Metric',\n                type: 'select',\n                required: true,\n                disabled: !isFieldEditable('metric'),\n                selectOptions: getMetricsForSelectedComponent(),\n                tooltip: 'Please configure the prometheus metric'\n            },\n            'category',\n            null\n        ),\n        shouldRenderField(\n            {\n                name: 'operator',\n                label: 'Operator',\n                type: 'select',\n                required: true,\n                selectOptions: queryOperators,\n                disabled: !isFieldEditable('operator'),\n                tooltip: 'Operator'\n            },\n            'metric',\n            null\n        ),\n        shouldRenderField(\n            {\n                name: 'threshold',\n                label: 'Threshold',\n                type: 'number',\n                required: true,\n                disabled: !isFieldEditable('threshold'),\n                tooltip: 'Threshold value to evaluate against the metric'\n            },\n            'operator',\n            ['gt', 'lt']\n        ),\n        shouldRenderField(\n            [{\n                name: 'threshold_from',\n                label: 'Threshold - From',\n                type: 'number',\n                required: true,\n                disabled: !isFieldEditable('category'),\n                tooltip: 'Select the Threshold - from value'\n            }, {\n                name: 'threshold_to',\n                label: 'Threshold - To',\n                type: 'number',\n                required: true,\n                disabled: !isFieldEditable('category'),\n                tooltip: 'Select the Threshold - to value'\n\n            }],\n            'operator',\n            ['within_range', 'outside_range']\n        )\n    ]));\n\n\n    const validationSchema = yup.object().shape({\n        category: yup.string().required(en.isRequired),\n        metric: yup.string().required(en.isRequired),\n        operator: yup.string().required(en.isRequired),\n        threshold: yup.number().when('operator', {\n            is: (operator: any) => !_.includes([\"within_range\", \"outside_range\"], operator),\n            then: yup.number().required(en.isRequired)\n        }),\n        threshold_from: yup.number().when('operator', {\n            is: (operator: any) => _.includes([\"within_range\", \"outside_range\"], operator),\n            then: yup.number().required(en.isRequired).min(0)\n        }),\n        threshold_to: yup.number().when('operator', {\n            is: (operator: any) => _.includes([\"within_range\", \"outside_range\"], operator),\n            then: yup.number().required(en.isRequired).min(0)\n                .test('Greater threshold_to', 'Value must be greater than Threshold - From.', (testValue: any) => testValue > _.get(value, \"threshold_from\"))\n        })\n    });\n\n    const validateForm = async () => {\n        return validateFormValues(formikRef, value);\n    };\n\n    const subscribeToFormChanges = async () => {\n        const isValid = await validateForm();\n        setValidQuery(isValid);\n        setFormData((preState: Record<string, any>) => {\n            const error = _.get(preState, 'error');\n            const { category, metric, metricAlias } = value;\n            const metricMetadata = _.find(getMetricsForSelectedComponent(), (metricPayload) => metricPayload.value == metric);\n            let metricAliasValue = _.get(metricMetadata, 'label');\n            if (!metricAliasValue) metricAliasValue = metricAlias;\n            return {\n                ...preState,\n                category: category,\n                queryBuilderContext: { ...value, metricAlias: metricAliasValue },\n                error: {\n                    ...error,\n                    [sectionLabel]: isValid\n                }\n            };\n        });\n    };\n\n    const fetchComponents = async () => {\n        try {\n            const components = await getMetricsGroupedByComponents();\n            setComponents(components);\n        } catch (error) { }\n        finally {\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        fetchComponents();\n        setLoading(true)\n    }, [])\n\n    useEffect(() => {\n        if (_.size(value) > 0) subscribeToFormChanges();\n    }, [value]);\n\n    const renderQueryChart = () => {\n        const updateRunQuery = (flag = true) => setRunQuery(flag);\n        return (\n            <>\n                <Grid item xs={12}>\n                    <Button disabled={!validQuery} startIcon={<PlayArrowOutlined />} variant=\"contained\" onClick={(_) => updateRunQuery()}>\n                        Run Query\n                    </Button>\n                </Grid>\n                {runQuery && (\n                    <Grid item xs={12}>\n                        <RunQuery random={Math.random()} handleClose={updateRunQuery} queryBuilderContext={value} />\n                    </Grid>\n                )}\n            </>\n        );\n    };\n\n    const renderQueryBuilderForm = () => {\n        return (\n            <Grid item sm={2}>\n                <MUIForm\n                    initialValues={value}\n                    enableReinitialize={true}\n                    subscribe={subscribe}\n                    onSubmit={(value: any) => onSubmission(value)}\n                    fields={fields}\n                    size={{ sm: 6, xs: 6, lg: 6 }}\n                    validationSchema={validationSchema}\n                    ref={formikRef}\n                    debounce={100}\n                />\n            </Grid>\n        );\n    };\n\n    return <>\n        {loading && <Loader />}\n        <Grid container direction={'column'} spacing={2}>\n            {renderQueryBuilderForm()}\n            {renderQueryChart()}\n        </Grid >\n    </>\n}\n\nexport default QueryBuilder;","import _ from 'lodash';\nimport { Grid } from \"@mui/material\";\nimport MUIForm from \"components/form\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport * as yup from 'yup';\nimport config from 'data/initialConfig';\nimport { querySeverity } from '../services/queryBuilder';\nimport { asyncValidation } from '../services/utils';\nimport en from 'utils/locales/en.json'\nimport { hasSpecialCharacters, validateFormValues } from \"services/utils\";\nimport { useSelector } from 'react-redux';\nconst { spacing } = config;\n\nconst validator = asyncValidation();\n\nconst extractNumber = (payload: string) => {\n    const matcher = payload.match(/\\d+/);\n    return matcher;\n}\n\nconst transformExistingState = (existingState: Record<string, any>) => {\n    const { frequency, interval } = existingState;\n    return {\n        ...existingState,\n        ...(frequency && interval && {\n            frequency: extractNumber(frequency),\n            interval: extractNumber(interval)\n        })\n    };\n}\n\nconst AlertInfo = (props: any) => {\n    const { formData, setFormData, existingState, sectionLabel, isFieldEditable } = props;\n    const validationConfigs = useSelector((state: any) => state?.config?.validationLimit || {})\n    const [value, subscribe] = useState<any>(transformExistingState(existingState));\n    const onSubmission = (value: any) => { };\n    const formikRef = useRef<any>();\n\n    const fields = useMemo(() => [\n        {\n            name: \"name\",\n            label: \"Name\",\n            type: \"text\",\n            required: true,\n            disabled: !isFieldEditable(\"name\"),\n            tooltip: \"Name of the alert rule\"\n        },\n        {\n            name: \"description\",\n            label: \"Description\",\n            type: \"text\",\n            required: true,\n            disabled: !isFieldEditable(\"description\"),\n            tooltip: \"Description for the alert rule\"\n        },\n        {\n            name: \"severity\",\n            label: \"Severity\",\n            type: \"select\",\n            required: true,\n            selectOptions: querySeverity,\n            disabled: !isFieldEditable(\"severity\"),\n            tooltip: \"Severity Level for the alert rule\"\n        },\n        {\n            name: \"frequency\",\n            label: \"Frequency\",\n            type: \"slider\",\n            config: {\n                step: 1,\n                max: 30,\n                suffix: \"Min\"\n            },\n            required: true,\n            disabled: !isFieldEditable(\"frequency\"),\n            tooltip: \"How frequently to evaluate this rule ?\"\n        },\n        {\n            name: \"interval\",\n            label: \"Interval\",\n            type: \"slider\",\n            config: {\n                step: 1,\n                max: 30,\n                suffix: \"Min\"\n            },\n            required: true,\n            disabled: !isFieldEditable(\"interval\"),\n            tooltip: \"How long the rule should persist in the current state to fire the alert ?\"\n        }\n    ], []);\n\n    const validationSchema = useMemo(() => yup\n        .object()\n        .shape({\n            name: yup.string().required(en.isRequired).test('Unique Rule Name', 'Rule name already exists', validator.checkUniqueRule(_.get(existingState, 'name')))\n                .test('specialChars', en.hasSpecialCharacters, value => !hasSpecialCharacters(value))\n                .trim(en.whiteSpaceConflict).strict(true)\n                .max(_.get(validationConfigs, ['alertRuleNameMaxLen'])),\n            description: yup.string().required(en.isRequired).max(300).test('specialChars', en.hasSpecialCharacters, value => !hasSpecialCharacters(value)).trim(en.whiteSpaceConflict).strict(true),\n            severity: yup.string().required(en.isRequired),\n            frequency: yup.number().required(en.isRequired),\n            interval: yup.number().required(en.isRequired)\n                .test('Greater Interval', 'Interval must be greater than or equal to frequency.', (testValue: any) => testValue >= _.get(value, \"frequency\"))\n        }), [value]);\n\n    const validateForm = async () => {\n        return validateFormValues(formikRef, value)\n    }\n\n    const subscribeToFormChanges = async () => {\n        const isValid = await validateForm();\n        setFormData((preState: Record<string, any>) => {\n            const error = _.get(preState, 'error');\n            return {\n                ...preState,\n                ...value,\n                error: {\n                    ...error,\n                    [sectionLabel]: isValid\n                }\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (_.size(value) > 0) subscribeToFormChanges();\n    }, [value]);\n\n    return (\n        <Grid container direction={'column'} spacing={spacing}>\n            {\n                <Grid item sm={2}>\n                    <MUIForm\n                        initialValues={value}\n                        enableReinitialize={true}\n                        subscribe={subscribe}\n                        onSubmit={(value: any) => onSubmission(value)}\n                        fields={fields}\n                        size={{ sm: 6, xs: 6, lg: 6 }}\n                        validationSchema={validationSchema}\n                        ref={formikRef}\n                        debounce={1000}\n                    />\n                </Grid>\n            }\n        </Grid>\n    );\n}\n\nexport default AlertInfo;","import { useMemo } from 'react';\nimport MainCard from 'components/MainCard';\nimport ScrollX from 'components/ScrollX';\nimport * as _ from 'lodash';\nimport TableWithCustomHeader from 'components/TableWithCustomHeader';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { Stack, Tooltip } from '@mui/material';\nimport { IconButton } from '@mui/material';\n\nconst LabelsList = (props: any) => {\n    const { labels, updateLabels, updateFormState, edit } = props;\n\n    const updateLabelsState = (label: string) => {\n        const currentIndex = _.findIndex(labels, (labelObj: any) => labelObj.label === label);\n        const filteredLabels = _.remove(labels, (labelObj: any, index: number) => currentIndex !== index);\n        updateLabels(filteredLabels);\n    }\n\n    const actions = useMemo(() =>[\n        {\n            label: \"Edit\",\n            color: \"primary\",\n            size: \"large\",\n            icon: <EditOutlined />,\n            onClick: async (context: Record<string, any>) => {\n                const { payload } = context;\n                const { label, value } = payload;\n                updateFormState({ label, value });\n                updateLabelsState(label)\n                edit(true);\n            }\n        },\n        {\n            label: \"Delete\",\n            color: \"primary\",\n            size: \"large\",\n            icon: <DeleteOutlined />,\n            onClick: async (context: Record<string, any>) => {\n                const { payload } = context;\n                const { label } = payload;\n                updateLabelsState(label)\n            }\n        }\n    ], [labels]);\n\n    const renderAction = (payload: Record<string, any>) => (action: Record<string, any>) => {\n        const { label, color, size, icon, onClick } = action;\n        return <Tooltip key={Math.random()} title={label} onClick={(e: any) => onClick({ payload })}>\n            <IconButton color={color} size={size}>\n                {icon}\n            </IconButton>\n        </Tooltip>\n    }\n\n    const columns = useMemo(\n        () => [\n            {\n                Header: 'Label',\n                accessor: 'label',\n                disableFilters: true,\n            },\n            {\n                Header: 'Value',\n                accessor: 'value',\n                disableFilters: true,\n            },\n            {\n                Header: 'Actions',\n                disableFilters: true,\n                Cell({ cell }: any) {\n                    const row = cell?.row?.original || {};\n                    return <Stack direction=\"row\" justifyContent=\"flex-start\" alignItems=\"center\">\n                        {_.map(actions, renderAction(row))}\n                    </Stack>\n                }\n            }\n        ],\n        [labels]\n    );\n\n    return (\n        <MainCard content={false}>\n            <ScrollX>\n                <TableWithCustomHeader columns={columns} renderHeader={null} data={labels} />\n            </ScrollX>\n        </MainCard>\n    );\n};\n\nexport default LabelsList;","import { Button, Grid } from \"@mui/material\";\nimport MUIForm from \"components/form\";\nimport { useEffect, useRef, useState } from \"react\";\nimport * as yup from 'yup';\nimport _ from 'lodash';\nimport LabelsList from \"./LabelsList\";\nimport { validateFormValues } from \"services/utils\";\nimport { useSelector } from \"react-redux\";\nimport en from 'utils/locales/en.json'\nimport { hasSpecialCharacters } from \"services/utils\";\n\nconst transformLabels = (labels: Record<string, any>) => {\n    return _.reduce(labels, (acc: Record<string, any>[], value, key) => {\n        const notificationLabelsExists = _.startsWith(key, 'notificationChannel');\n        if (!notificationLabelsExists) {\n            acc = [...acc, { label: key, value }]\n        }\n        return acc;\n    }, [])\n}\n\nconst LabelComponent = (props: any) => {\n    const { formData, setFormData, existingState, sectionLabel } = props;\n    const [value, subscribe] = useState<any>({});\n    const [isEdit, setIsEdit] = useState(false);\n    const validationConfigs = useSelector((state: any) => state?.config?.validationLimit || {})\n    const onSubmission = (value: any) => {\n\n    };\n    const formikRef = useRef<any>();\n    const [labels, setLabels] = useState<any[]>(transformLabels(existingState?.labels || {}));\n    const [formErrors, setFormErrors] = useState<boolean>(true);\n\n    const fields = [\n        {\n            name: \"label\",\n            label: \"Key\",\n            type: \"text\",\n            required: true,\n        },\n        {\n            name: \"value\",\n            label: \"Value\",\n            type: \"text\",\n            required: true,\n        }\n    ];\n\n    const similarKey = \"Please enter a unique key\";\n\n    const duplicateKey = (key: string | undefined) => {\n        return _.find(labels, (label) => label.label === key);\n    }\n\n    const validationSchema = yup\n        .object()\n        .shape({\n            label: yup.string().required(en.isRequired)\n                .max(_.get(validationConfigs, ['alertRuleLabelsMaxLen']))\n                .trim(en.whiteSpaceConflict).strict(true)\n                .test('specialChars', en.hasSpecialCharacters, value => !hasSpecialCharacters(value))\n                .test('duplicateKey', similarKey, (value) => {\n                    return !duplicateKey(value);\n                }),\n            value: yup.string().required(en.isRequired)\n                .trim(en.whiteSpaceConflict).strict(true)\n                .test('specialChars', en.hasSpecialCharacters, value => !hasSpecialCharacters(value))\n                .max(_.get(validationConfigs, ['alertRuleLabelsMaxLen']))\n        });\n\n    const validateForm = async () => {\n        return validateFormValues(formikRef, value)\n    }\n\n    const addLabel = () => {\n        const { label: labelKey, value: labelValue } = value;\n        setLabels(preState => {\n            return [...preState, value]\n        });\n        setFormData((preState: Record<string, any>) => {\n            const existingLabels = _.get(preState, 'labels') || {}\n            return {\n                ...preState,\n                labels: {\n                    ...existingLabels,\n                    [labelKey]: labelValue\n                }\n            }\n        })\n        subscribe({ label: \"\", value: \"\" })\n        setIsEdit(false);\n    }\n\n    const editLabel = async (index: number) => {\n        const { label: labelKey, value: labelValue } = value;\n        setLabels(preState => {\n            const newState = [...preState, value];\n            transformLabels(newState);\n            return newState;\n        });\n        setFormData((preState: Record<string, any>) => {\n            const existingLabels = _.get(preState, 'labels') || {}\n            return {\n                ...preState,\n                labels: {\n                    ...existingLabels,\n                    [labelKey]: labelValue\n                }\n            }\n        })\n        subscribe({ label: \"\", value: \"\" })\n        setIsEdit(false);\n    }\n\n    const updateLabels = (labels: any[]) => {\n        setLabels(labels);\n    }\n\n    const updateFormState = (value: any) => {\n        subscribe(value);\n    }\n\n    const renderLabels = () => {\n        const filteredLabels = _.filter(labels, (data) => data?.label !== \"type\" && data?.label !== \"component\")\n        if (_.size(filteredLabels) == 0) return null;\n        return <Grid item xs={12}>\n            <LabelsList\n                labels={filteredLabels}\n                updateLabels={updateLabels}\n                updateFormState={updateFormState}\n                edit={setIsEdit} />\n        </Grid>\n    }\n\n    const renderCreateLabelsForm = () => {\n        return <Grid item xs={12}>\n            <MUIForm\n                initialValues={value}\n                enableReinitialize={true}\n                subscribe={subscribe}\n                onSubmit={(value: any) => onSubmission(value)}\n                fields={fields}\n                size={{ sm: 6, xs: 6, lg: 6 }}\n                validationSchema={validationSchema}\n                ref={formikRef}\n            />\n        </Grid>\n    }\n\n    const subscribeToFormChanges = async () => {\n        const isValid = await validateForm();\n        setFormErrors(!isValid)\n    }\n\n    useEffect(() => {\n        if (_.size(value) > 0) subscribeToFormChanges();\n    }, [value])\n\n    return (\n        <>\n            <Grid container direction={'row'} spacing={2} justifyContent='center' alignItems='center'>\n                {renderLabels()}\n                {renderCreateLabelsForm()}\n                <Grid item xs={12}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"success\"\n                        disabled={formErrors}\n                        onClick={() => {\n                            const index = _.findIndex(labels, (label) => label.label === value.label);\n                            isEdit ? editLabel(index) : addLabel();\n                        }}\n                    >\n                        {\n                            isEdit ? `Update Label` : `Add Label`\n                        }\n                    </Button>\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default LabelComponent;","import { Grid, Stack } from \"@mui/material\";\nimport _ from 'lodash';\nimport dayjs from 'dayjs';\nimport endpoints from 'data/apiEndpoints';\nimport ApexChart from \"sections/dashboard/analytics/apex\";\nimport MainCard from \"components/MainCard\";\nimport { Button } from \"@mui/material\";\nimport { CloseOutlined } from \"@ant-design/icons\";\nimport { useEffect, useState } from \"react\";\nimport Loader from \"components/Loader\";\n\nconst RunQuery = (props: any) => {\n    const { handleClose, queryBuilderContext } = props;\n    const { metric, threshold, threshold_from, threshold_to, operator } = queryBuilderContext\n    const [metadata, setMetadata] = useState<Record<string, any> | null>(null);\n    const [loading, setLoading] = useState(false)\n\n    const getFirstRangeAnnotation = () => {\n        let y1, y2;\n\n        switch (operator) {\n            case 'gt': {\n                y1 = +threshold;\n                y2 = +threshold * 100;\n                break;\n            }\n            case 'lt': {\n                y2 = +threshold;\n                y1 = 0;\n                break;\n            }\n            case 'within_range': {\n                y1 = +threshold_from;\n                y2 = +threshold_to;\n                break;\n            }\n            case 'outside_range': {\n                y1 = 0;\n                y2 = threshold_from;\n                break;\n            }\n            default:\n                return\n        }\n\n        return {\n            y: y1,\n            y2: y2,\n            fillColor: '#8AFF8A',\n            opacity: 0.2\n        }\n    }\n\n    const getSecondRangeAnnotations = () => {\n        let y1, y2;\n\n        switch (operator) {\n            case 'outside_range': {\n                y1 = +threshold_to;\n                y2 = +threshold_to * 100;\n                break;\n            }\n            default:\n                return\n        }\n        return {\n            y: y1,\n            y2: y2,\n            fillColor: '#8AFF8A',\n            opacity: 0.2\n        }\n    }\n\n    const getChartQuery = () => {\n        const y_axis_value = _.includes([\"within_range\", \"outside_range\"], operator) ? [threshold_from, threshold_to] : threshold\n        return {\n            type: 'line',\n            series: [],\n            options: {\n                chart: {\n                    type: 'line',\n                    toolbar: {\n                        show: false\n                    }\n                },\n                annotations: {\n                    yaxis: [\n                        {\n                            y: +threshold,\n                            borderColor: '#FF0000',\n                            strokeDashArray: 0,\n                            label: {\n                                borderColor: '#FF0000',\n                                style: {\n                                    color: 'white',\n                                    background: '#FF0000',\n                                    padding: {\n                                        left: 2,\n                                        right: 2,\n                                        top: 2,\n                                        bottom: 2,\n                                    }\n                                },\n                                text: `Threshold value at ${y_axis_value}`\n                            }\n                        },\n                        getFirstRangeAnnotation(),\n                        getSecondRangeAnnotations()\n                    ]\n                },\n                xaxis: {\n                    type: 'datetime',\n                    labels: {\n                        formatter: function (value: any, timestamp: any) {\n                            const givenTimestamp = dayjs.unix(timestamp);\n                            return givenTimestamp.format('DD MMM HH:mm');\n                        }\n                    },\n                    title: {\n                        text: \"Time\"\n                    }\n                },\n                yaxis: {\n                    labels: {\n                        formatter: function (value: any) {\n                            if (typeof value === 'number') {\n                                return _.round(value, 1)\n                            }\n                            return value;\n                        }\n                    }\n                }\n            },\n            query: {\n                id: 'apiResponseTimeTimeseries',\n                type: 'api',\n                url: endpoints.prometheusReadRange,\n                method: 'GET',\n                headers: {},\n                body: {},\n                params: {\n                    query: metric,\n                    step: '5m',\n                    start: dayjs().unix(),\n                    end: dayjs().subtract(1, 'day').unix()\n                },\n                parse: (response: any) => {\n                    const result = _.get(response, 'data.result');\n                    return _.map(result, payload => {\n                        const metric = _.get(payload, 'metric');\n                        return {\n                            name: JSON.stringify(metric) || \"Unknown\",\n                            data: _.get(payload, 'values')\n                        }\n                    })\n                },\n                error() {\n                    return [];\n                }\n            }\n        }\n    }\n\n    const fetchMetadata = async () => {\n        setLoading(true)\n        const metadata = await getChartQuery();\n        setMetadata(metadata);\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        fetchMetadata();\n    }, [metric, operator, threshold, threshold_from, threshold_to]);\n\n    const renderPrimaryTitle = () => <>Query</>\n\n    const renderSecondaryTitle = () => {\n        if (!handleClose) return null;\n        return <>\n            <Stack direction={'row'} spacing={2}>\n                <Button startIcon={<CloseOutlined />} variant=\"contained\" onClick={_ => handleClose(false)}>\n                    Close\n                </Button>\n            </Stack>\n        </>\n    }\n\n    const renderChart = () => {\n        if (loading) return <Loader />\n        if (!metadata) return null;\n        let refresh = false;\n\n        setTimeout(() => {\n            refresh = true;\n        })\n\n        return <Grid item key={Math.random()} overflow=\"hidden\">\n            <ApexChart key={Math.random()} refresh={refresh} height=\"300\" metadata={metadata} interval={1440}></ApexChart>\n        </Grid>\n    }\n\n    return <>\n        <Grid container direction={'column'} spacing={2}>\n            {renderChart()}\n        </Grid>\n    </>\n}\n\nexport default RunQuery;","// This icon file is generated automatically.\nvar DeleteOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z\" } }] }, \"name\": \"delete\", \"theme\": \"outlined\" };\nexport default DeleteOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DeleteOutlinedSvg from \"@ant-design/icons-svg/es/asn/DeleteOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar DeleteOutlined = function DeleteOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DeleteOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(DeleteOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'DeleteOutlined';\n}\nexport default RefIcon;","// This icon file is generated automatically.\nvar EditOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" } }] }, \"name\": \"edit\", \"theme\": \"outlined\" };\nexport default EditOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\nvar RefIcon = /*#__PURE__*/React.forwardRef(EditOutlined);\nif (process.env.NODE_ENV !== 'production') {\n  RefIcon.displayName = 'EditOutlined';\n}\nexport default RefIcon;"],"names":["_ref","columns","data","renderHeader","tableData","setTableData","useState","filterTypes","useMemo","renderFilterTypes","defaultColumn","Filter","DefaultColumnFilter","initialState","filters","hiddenColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","preGlobalFilteredRows","setGlobalFilter","toggleRowExpanded","useTable","autoResetExpanded","useGlobalFilter","useFilters","useExpanded","useEffect","_jsxs","Stack","spacing","children","Table","_jsx","TableHead","sx","borderTopWidth","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","style","TableCell","getHeaderProps","className","render","TableBody","group","canFilter","row","getRowProps","cells","cell","getCellProps","props","formData","setFormData","existingState","sectionLabel","existingNotifications","_","channelId","value","subscribe","notificationChannel","notificationFieldOptions","setNotificationFieldOptions","formikRef","useRef","navigate","useNavigate","fetchNotifications","async","transformedChannels","channels","channel","id","name","type","label","transformChannels","fetchChannels","then","response","catch","err","fields","required","selectOptions","tooltip","preState","notification","subscribeToFormChanges","Grid","container","direction","alignItems","item","xs","MUIForm","initialValues","enableReinitialize","onSubmit","ref","Button","variant","onClick","justifyContent","Typography","fontWeight","Box","StandardWidthButton","interactIds","size","width","createSvgIcon","d","isFieldEditable","operatorType","thresholdValue","threshold_from","threshold_to","threshold","selectedCategory","setSelectedCategory","category","loading","setLoading","runQuery","setRunQuery","validQuery","setValidQuery","components","setComponents","shouldRenderField","field","dependsOn","values","currentValue","getMetricsForSelectedComponent","selectedComponent","selectedSubComponent","supportedMetrics","filteredMetrics","supportedMetric","subComponent","alias","metric","getSubComponentForSelectedComponent","subComponents","disabled","component","shouldRenderSubComponentField","queryOperators","validationSchema","yup","shape","en","isRequired","operator","when","is","min","test","testValue","isValid","validateFormValues","validateForm","error","metricAlias","metricMetadata","metricPayload","metricAliasValue","queryBuilderContext","getMetricsGroupedByComponents","fetchComponents","_Fragment","Loader","sm","lg","debounce","renderQueryChart","updateRunQuery","arguments","length","undefined","startIcon","PlayArrowOutlined","RunQuery","random","Math","handleClose","config","validator","asyncValidation","extractNumber","payload","match","validationConfigs","useSelector","_state$config","validationLimit","frequency","interval","transformExistingState","querySeverity","step","max","suffix","checkUniqueRule","hasSpecialCharacters","trim","strict","description","severity","labels","updateLabels","updateFormState","edit","updateLabelsState","currentIndex","labelObj","filteredLabels","index","actions","color","icon","EditOutlined","context","DeleteOutlined","Header","accessor","disableFilters","Cell","_cell$row","original","action","Tooltip","title","e","IconButton","MainCard","content","ScrollX","TableWithCustomHeader","transformLabels","acc","key","isEdit","setIsEdit","setLabels","formErrors","setFormErrors","whiteSpaceConflict","renderLabels","LabelsList","labelKey","labelValue","newState","existingLabels","editLabel","addLabel","metadata","setMetadata","getFirstRangeAnnotation","y1","y2","y","fillColor","opacity","getSecondRangeAnnotations","fetchMetadata","getChartQuery","y_axis_value","series","options","chart","toolbar","show","annotations","yaxis","borderColor","strokeDashArray","background","padding","left","right","top","bottom","text","xaxis","formatter","timestamp","dayjs","format","query","url","endpoints","prometheusReadRange","method","body","params","start","unix","end","subtract","parse","result","JSON","stringify","renderChart","refresh","setTimeout","overflow","ApexChart","height","React","AntdIcon","_objectSpread","DeleteOutlinedSvg","EditOutlinedSvg"],"sourceRoot":""}