{"version":3,"file":"static/js/606.4b1a41a4.chunk.js","mappings":"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","sources":["pages/alertManager/services/configuration.ts","pages/alertManager/views/EditRule.tsx"],"sourcesContent":["import _ from 'lodash';\n\nexport const functionalAlertConfig = {\n    type: \"custom\",\n    searchQuery: { \"request\": { \"filters\": { \"context.alertType\": \"CUSTOM\" }, \"options\": { \"order\": [['updatedAt', 'DESC']] } } },\n    allowedActions: [\"publish\", \"view\", \"edit\", \"retire\", \"back\", \"refresh\", \"silence\"],\n    list: {\n        title: \"Alert Rules\",\n        showAddAlertBtn: true,\n    },\n    edit: {\n        editableFields: \"*\"\n    },\n    alerts_warning_message: \"No Custom alert rules configured. Click on Add Alerts to create a Custom alert rule\"\n}\n\nexport const systemAlertConfig = {\n    type: \"system\",\n    searchQuery: { \"request\": { \"filters\": { \"context.alertType\": \"SYSTEM\" }, \"options\": { \"order\": [['updatedAt', 'DESC']] } } },\n    allowedActions: [\"publish\", \"view\", \"edit\", \"back\", \"refresh\", \"silence\"],\n    list: {\n        title: \"Alert Rules\",\n        showAddAlertBtn: false,\n    },\n    edit: {\n        warningMessage: \"Some fields may not be editable for system provisioned alerts.\",\n        editableFields: [\"severity\"]\n    },\n    alerts_warning_message: \"No System alert rules configured\"\n}\n\nexport const getConfiguration = (alert: Record<string, any>) => {\n    const alertType = _.toLower(alert?.context?.alertType || \"custom\");\n    switch (alertType) {\n        case 'system': return systemAlertConfig\n        case 'custom': return functionalAlertConfig\n        default: throw new Error('invalid type')\n    }\n}","import { Grid } from '@mui/material';\nimport MainCard from 'components/MainCard';\nimport _ from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { editAlert, getAlertDetail } from 'services/alerts';\nimport AlertInfo from '../components/RuleInfo';\nimport QueryBuilder from '../components/QueryBuilder';\nimport RuleLabels from '../components/RuleLabels';\nimport NotificationComponent from '../components/NotificationComponent';\nimport { useDispatch } from 'react-redux';\nimport { error, success } from 'services/toaster';\nimport { validateForm } from '../services/queryBuilder';\nimport { transformRulePayload, renderSections } from '../services/utils';\nimport { getConfiguration } from '../services/configuration';\nimport { Alert } from '@mui/material';\nimport { renderSkeleton } from 'services/skeleton';\n\nconst EditRule = () => {\n    const { id } = useParams();\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const [formData, setFormData] = useState<Record<string, any>>({ error: {} });\n    const commonProps = { formData, setFormData, dispatch };\n    const [ruleMetadata, setRuleMetadata] = useState({});\n    const [loading, setLoading] = useState(false);\n    const [configuration, setConfiguration] = useState<Record<string, any>>({});\n    const alertType = _.get(ruleMetadata, 'context.alertType');\n\n    const fetchRuleMetadata = async (id: string) => {\n        try {\n            const metadata = await getAlertDetail({ id });\n            setRuleMetadata(metadata);\n            setConfiguration(getConfiguration(metadata));\n        } catch (err) {\n            dispatch(error({\n                message: \"Failed to fetch rule metadata\"\n            }))\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    useEffect(() => {\n        if (id) {\n            setLoading(true);\n            fetchRuleMetadata(id);\n        }\n    }, [id]);\n\n    const isFieldEditable = (id: string) => {\n        const editableFields = configuration?.edit?.editableFields || \"*\";\n        if (editableFields === \"*\") return true;\n        return _.includes(editableFields, id);\n    }\n\n    const sections = useMemo(() => [\n        {\n            id: 'queryBuilder',\n            title: 'Query Builder',\n            description: 'List down the requirements of your query and set the alert conditions',\n            component: <QueryBuilder {...{ ...commonProps, existingState: _.get(ruleMetadata, 'metadata.queryBuilderContext'), sectionLabel: \"queryBuilder\", isFieldEditable }} />\n        },\n        {\n            id: 'alertInfo',\n            title: 'Rule Configuration',\n            description: 'Set the basic information for your alert',\n            component: <AlertInfo {...{ ...commonProps, existingState: _.pick(ruleMetadata, ['name', 'description', 'interval', 'frequency', 'severity']), sectionLabel: \"alertInfo\", isFieldEditable }} />\n        },\n        {\n            id: 'labels',\n            title: 'Labels',\n            description: 'Attach labels to your alert',\n            component: <RuleLabels {...{ ...commonProps, existingState: _.pick(ruleMetadata, 'labels'), sectionLabel: \"labels\", isFieldEditable }} />\n        },\n        {\n            id: 'notifications',\n            title: 'Notification Channel',\n            description: 'Configure notification channel for your alert',\n            component: <NotificationComponent {...{ ...commonProps, existingState: _.pick(ruleMetadata, 'notification'), sectionLabel: \"notifications\", isFieldEditable }} />\n        }\n    ], [ruleMetadata]);\n\n    const editAlertRule = () => {\n        const rulePayload = transformRulePayload({ ...formData, context: { alertType: alertType } });\n        return editAlert({ id: id, data: rulePayload });\n    };\n\n    const updateRule = async () => {\n        setLoading(true)\n        try {\n            if (validateForm(_.get(formData, 'error'))) {\n                await editAlertRule();\n                navigate(`/alertRules/${_.toLower(alertType)}`);\n                dispatch(success({ message: \"Alert Rule updated successfully\" }));\n            } else {\n                dispatch(error({ message: \"Please fill all required fields\" }));\n            }\n        } catch (err) {\n            dispatch(error({ message: \"Failed to update alert rule\" }));\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    const renderWarningMessage = () => {\n        const warningMessage = configuration?.edit?.warningMessage;\n        if (!warningMessage) return null;\n        return <Alert severity=\"warning\">{warningMessage}</Alert>\n    }\n\n    return (\n        <MainCard content={false}>\n            {renderWarningMessage()}\n            <Grid>{loading ?\n                renderSkeleton({ config: { type: \"card\", loader: true, height: 80 } }) :\n                renderSections({ sections: sections, formData: formData, actionHandler: updateRule, actionLabel: \"Update Rule\" })\n            }</Grid>\n        </MainCard>\n    );\n};\n\nexport default EditRule;\n"],"names":["functionalAlertConfig","type","searchQuery","allowedActions","list","title","showAddAlertBtn","edit","editableFields","alerts_warning_message","systemAlertConfig","warningMessage","getConfiguration","alert","_alert$context","_","context","alertType","Error","EditRule","id","useParams","navigate","useNavigate","dispatch","useDispatch","formData","setFormData","useState","error","commonProps","ruleMetadata","setRuleMetadata","loading","setLoading","configuration","setConfiguration","useEffect","async","metadata","getAlertDetail","err","message","fetchRuleMetadata","isFieldEditable","_configuration$edit","sections","useMemo","description","component","_jsx","QueryBuilder","existingState","sectionLabel","AlertInfo","RuleLabels","NotificationComponent","_jsxs","MainCard","content","children","renderWarningMessage","_configuration$edit2","Alert","severity","Grid","renderSkeleton","config","loader","height","renderSections","actionHandler","validateForm","editAlertRule","rulePayload","transformRulePayload","editAlert","data","success","actionLabel"],"sourceRoot":""}