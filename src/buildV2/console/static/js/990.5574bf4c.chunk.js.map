{"version":3,"file":"static/js/990.5574bf4c.chunk.js","mappings":"mTAcA,MAkGA,EA7FmBA,KACf,MAAMC,GAAWC,EAAAA,EAAAA,OACVC,EAAUC,IAAeC,EAAAA,EAAAA,UAA8B,CAC1DC,MAAO,CAAEC,eAAe,EAAOC,kBAAkB,GACjDC,SAASC,EAAAA,EAAAA,IAAe,oBAErBC,EAAuBC,IAA4BP,EAAAA,EAAAA,WAAS,IAC5DQ,EAASC,IAAcT,EAAAA,EAAAA,WAAS,GACjCU,EAAc,CAAEZ,WAAUC,cAAaH,YACvCe,EAAsBC,EAAAA,IAAMd,EAAU,SACrCe,EAAaC,IAAkBd,EAAAA,EAAAA,WAAkB,GAClDe,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,UACb,IAAM,CACF,CACIC,GAAI,OACJC,MAAO,8BACPC,YACI,uIAEJC,WAAWC,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,IAAUd,EAAae,aAAc,sBAElEd,EACE,CACE,CACIQ,GAAI,WACJC,MAAO,iCACPC,YAAa,iBAAiBT,EAAAA,QAAUD,aACxCW,WAAWC,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,IAAUhB,EAAae,aAAc,uBAGvE,KAEV,CAACd,KAqBLgB,EAAAA,EAAAA,YAAU,KACNb,GAAe,EAAM,GACtB,CAAChB,IAEJ,MAIM8B,EAAqB,CACvBX,SAAUA,EACVnB,SAAUA,EACV+B,cA7B8BC,UAC9BrB,GAAW,GACX,KA5CSsB,EA6COnB,EAAAA,IAAMd,EAAU,WA3C7Bc,EAAAA,MAAQA,EAAAA,OAASmB,IAAUC,IAAoB,IAAVA,YA4C1BC,EAAAA,EAAAA,IAAc,CAChBC,KAAM,IAAKtB,EAAAA,KAAOd,EAAU,CAAC,aAGjCiB,EAAS,kBACTnB,GAASuC,EAAAA,EAAAA,IAAQ,CAAEC,QAAS,+CAEpC,CAAE,MAAOC,GACLzC,GAASK,EAAAA,EAAAA,IAAM,CAAEmC,QAAS,6BAC9B,CAAC,QACG3B,GAAW,EACf,CAzDSsB,KAyDT,EAeAO,YAAa,2BACbC,sBAAuB,eACvBC,wBAV4BC,KAC5BlC,GAAyB,EAAK,EAU9BM,eAYJ,OAAO6B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACFpC,IAAWe,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,KACnBtB,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAAAF,UACAG,EAAAA,EAAAA,IAAenB,MAEpBL,EAAAA,EAAAA,KAACuB,EAAAA,GAAI,CAAAF,UAXDrB,EAAAA,EAAAA,KAACyB,EAAAA,EAAM,CAACC,KAAM3C,EAAuB4C,WAAW,EAAKN,UACjDrB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAe,CAACC,QAHJC,GAAkC9C,GAAyB,GAGjC+C,QAASxD,EAAUgB,eAAgBA,UAanF,C","sources":["pages/notificationChannels/AddChannel.tsx"],"sourcesContent":["import * as _ from 'lodash';\nimport { Dialog, Grid } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { useEffect, useMemo, useState } from 'react';\nimport SelectChannelType from './components/SelectChannelType';\nimport ConfigureChannel from './components/ConfigureChannel';\nimport { createChannel } from 'services/notificationChannels';\nimport { error, success } from 'services/toaster';\nimport { useNavigate } from 'react-router';\nimport { renderSections } from 'pages/alertManager/services/utils';\nimport SendTestMessage from './components/SendTestMessage';\nimport Loader from 'components/Loader';\nimport { getConfigValue } from 'services/configData';\n\nconst isValid = (config: Record<string, any>) => {\n    if (!config) return false;\n    return _.every(_.values(config), (value) => value === true);\n};\n\nconst AddChannel = () => {\n    const dispatch = useDispatch();\n    const [formData, setFormData] = useState<Record<string, any>>({\n        error: { selectChannel: false, configureChannel: false },\n        manager: getConfigValue(\"ALERT_MANAGER\")\n    });\n    const [testChannelDialogOpen, setTestChannelDialogOpen] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const commonProps = { formData, setFormData, dispatch };\n    const selectedChannelType = _.get(formData, 'type');\n    const [testChannel, setTestChannel] = useState<boolean>(false)\n    const navigate = useNavigate();\n\n    const sections = useMemo(\n        () => [\n            {\n                id: 'type',\n                title: 'Select Notification Channel',\n                description:\n                    'In order to add a notification to an alert rule you first need to add and configure a notification channel (can be Slack, Email etc)',\n                // componentType: 'box',\n                component: <SelectChannelType {...{ ...commonProps, sectionLabel: 'selectChannel' }} />\n            },\n            ...(selectedChannelType\n                ? [\n                    {\n                        id: 'metadata',\n                        title: 'Configure Notification Channel',\n                        description: `Configure the ${_.toUpper(selectedChannelType)} channel`,\n                        component: <ConfigureChannel {...{ ...commonProps, sectionLabel: 'configureChannel' }} />\n                    }\n                ]\n                : [])\n        ],\n        [selectedChannelType]\n    );\n\n    const createNotificationChannel = async () => {\n        setLoading(true)\n        try {\n            if (isValid(_.get(formData, 'error'))) {\n                await createChannel({\n                    data: { ..._.omit(formData, ['error']) }\n                });\n\n                navigate('/alertChannels');\n                dispatch(success({ message: 'Notification channel created successfully' }));\n            }\n        } catch (err) {\n            dispatch(error({ message: \"Failed to create channel\" }));\n        } finally {\n            setLoading(false)\n        }\n    };\n\n    useEffect(() => {\n        setTestChannel(false)\n    }, [formData])\n\n    const testNotificationChannel = () => {\n        setTestChannelDialogOpen(true);\n    };\n\n    const renderSectionProps = {\n        sections: sections,\n        formData: formData,\n        actionHandler: createNotificationChannel,\n        actionLabel: \"Add Notification Channel\",\n        notificationTestLabel: \"Test Channel\",\n        notificationTestHandler: testNotificationChannel,\n        testChannel\n    };\n\n    const renderTestChannelDialog = () => {\n        const handleClose = (context?: Record<string, any>) => setTestChannelDialogOpen(false);\n        return (\n            <Dialog open={testChannelDialogOpen} fullWidth={true}>\n                <SendTestMessage onClose={handleClose} channel={formData} setTestChannel={setTestChannel} />\n            </Dialog>\n        );\n    };\n\n    return <>\n        {loading && <Loader />}\n        <Grid>\n            {renderSections(renderSectionProps)}\n        </Grid>\n        <Grid>\n            {renderTestChannelDialog()}\n        </Grid>\n    </>\n};\n\nexport default AddChannel;\n"],"names":["AddChannel","dispatch","useDispatch","formData","setFormData","useState","error","selectChannel","configureChannel","manager","getConfigValue","testChannelDialogOpen","setTestChannelDialogOpen","loading","setLoading","commonProps","selectedChannelType","_","testChannel","setTestChannel","navigate","useNavigate","sections","useMemo","id","title","description","component","_jsx","SelectChannelType","sectionLabel","ConfigureChannel","useEffect","renderSectionProps","actionHandler","async","config","value","createChannel","data","success","message","err","actionLabel","notificationTestLabel","notificationTestHandler","testNotificationChannel","_jsxs","_Fragment","children","Loader","Grid","renderSections","Dialog","open","fullWidth","SendTestMessage","onClose","context","channel"],"sourceRoot":""}