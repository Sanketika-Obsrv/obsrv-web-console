{"version":3,"file":"static/js/690.3406ed65.chunk.js","mappings":"8RAeA,MA8CA,EA9CqBA,IACjB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACRC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IACjC,UAAEC,GAAcL,GACfM,IAAgBC,EAAAA,EAAAA,MACjBC,EAASF,EAAaG,IAAI,WAAa,QACvCC,EAAOJ,EAAaG,IAAI,QACxBE,GAAWC,EAAAA,EAAAA,MASXC,EAAsBC,UACxB,IARwBC,KACxB,MAAMC,EAAaC,EAAAA,IAAMF,EAAa,sDAChCG,EAAwBC,eAAeC,QAAQ,GAAGJ,gBAA2B,IACnFC,EAAAA,IAAMF,EAAa,YAAYC,eAAyBK,SAASH,IACjEpB,GAASwB,EAAAA,EAAAA,IAAQP,GAAa,EAM1BQ,OAD2BC,EAAAA,EAAAA,IAAgBnB,EAAYoB,EAAAA,GAAcC,OAEzE,CAAE,MAAOC,GACL7B,GAAS8B,EAAAA,EAAAA,IAAM,CAAEC,QAAS,6BAC1BlB,EAAS,IACb,CAAC,QACGR,GAAW,EACf,GAQJ,OALA2B,EAAAA,EAAAA,YAAU,KACN3B,GAAW,GACXU,GAAqB,GACtB,CAACR,KAGA0B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACK/B,IAAWgC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACnBD,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACC,WAAS,EAACC,WAAY,IAAKC,cAAe,EAAEN,UAC9CC,EAAAA,EAAAA,KAACE,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGR,UACdC,EAAAA,EAAAA,KAACQ,EAAAA,EAA0B,CAACC,MAAM,EAAMnC,OAAkB,QAAVA,EAAkBE,KAAMA,UAGjF,C","sources":["pages/dataset/editDataset.tsx"],"sourcesContent":["import {\n    Grid\n} from '@mui/material';\nimport NewDatasetOnboardingWizard from './wizard';\nimport { useDispatch } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router';\nimport { useEffect, useState } from 'react';\nimport { datasetRead, getDatasetState } from 'services/dataset';\nimport * as _ from 'lodash';\nimport { restore } from 'store/reducers/wizard';\nimport { error } from 'services/toaster';\nimport { useSearchParams } from 'react-router-dom';\nimport Loader from 'components/Loader';\nimport { DatasetStatus } from 'types/datasets';\n\nconst EditDataset = (props: any) => {\n    const dispatch = useDispatch();\n    const params = useParams();\n    const [loading, setLoading] = useState(false)\n    const { datasetId } = params;\n    const [searchParams] = useSearchParams();\n    const master = searchParams.get(\"master\") || \"false\";\n    const page = searchParams.get(\"page\");\n    const navigate = useNavigate();\n\n    const restoreClientState = (restoreData: any) => {\n        const dataset_id = _.get(restoreData, 'pages.datasetConfiguration.state.config.dataset_id')\n        const activeWizardPage: any = sessionStorage.getItem(`${dataset_id}_activePage` || \"\")\n        _.set(restoreData, `metadata.${dataset_id}_activePage`, parseInt(activeWizardPage))\n        dispatch(restore(restoreData));\n    }\n\n    const fetchDatasetDetails = async () => {\n        try {\n            const datasetState = await getDatasetState(datasetId!, DatasetStatus.Draft);\n            restoreClientState(datasetState);\n        } catch (err) {\n            dispatch(error({ message: 'Dataset does not exists' }));\n            navigate('/');\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    useEffect(() => {\n        setLoading(true)\n        fetchDatasetDetails();\n    }, [datasetId]);\n\n    return (\n        <>\n            {loading && <Loader />}\n            <Grid container rowSpacing={4.5} columnSpacing={3}>\n                <Grid item xs={12}>\n                    <NewDatasetOnboardingWizard edit={true} master={master == \"true\"} page={page} />\n                </Grid>\n            </Grid>\n        </>\n    )\n};\n\nexport default EditDataset;\n"],"names":["props","dispatch","useDispatch","params","useParams","loading","setLoading","useState","datasetId","searchParams","useSearchParams","master","get","page","navigate","useNavigate","fetchDatasetDetails","async","restoreData","dataset_id","_","activeWizardPage","sessionStorage","getItem","parseInt","restore","restoreClientState","getDatasetState","DatasetStatus","Draft","err","error","message","useEffect","_jsxs","_Fragment","children","_jsx","Loader","Grid","container","rowSpacing","columnSpacing","item","xs","NewDatasetOnboardingWizard","edit"],"sourceRoot":""}